---
layout: post
title:  "NMAP"
date:   2021-11-09 00:00:00 +0300
img: nmap-logo.png
tags: [sistemas, redes]
---
¿Qué es NMAP?

Nmap es un programa de código abierto que sirve para efectuar rastreo de puertos escrito originalmente por Gordon Lyon y cuyo desarrollo se encuentra hoy a cargo de una comunidad. Fue creado originalmente para Linux aunque actualmente es multiplataforma.

```code
nmap -sV -sC -O -n -oA nmapscan 192.168.0.1/24
```
-iL lista_IPs

-iR numero --> Número de Ips aleatorias, se pueden excluir posibles Ips con --exclude <Ips> o --excludefile <fichero>

Descubrimiento de equipos:

Podemos usar máscaras/24
-sL: No es invasivo, lista los objetivos realizando peticiones de DNS para resolver nombres. Sirve para saber si por ejemplo 192.168.1.0/24 todas las Ips son objetivos nuestros.
    
Por defecto Nmap lanza una fase de descubrimiento que consta de: -PA80 -PS443 -PE -PP
   
-Pn No ping --> útil si se sabe que todos están activos (sino lo estuviera alguno se podría perder mucho tiempo, pero también saca falsos negativos esta opción diciendo que no esta activo), impide la fase de descubirmiento
    
-sn No port scan: Tras completar fase de reconocimiento no analiza puertos. Es relativamente sigilosa, y permite un pequeño reconocimiento de la red. Con privilegios envía un ACK (-PA) al 80, un SYN(-PS) al 443 y un echo request y un Timestamp request, sin privilegios siempre completa conexiones. Si el objetivo es de la red, solo usa ARP(-PR). Si se usa con otra opción solo se lanzan los paquetes de la otra opción.
    
-PR Ping ARP: Se usa por defecto cuando se analizan equipos de nuestra red, es más rápido que usar pings. Si no se quiere usar paquetes ARP hay que usar --send-ip.
    
-PS<puertos> SYN: envía paquetes de SYN a los que si responde SYN/ACK es que esta abierto(al que se reponde con RST para no acabar la conexión), si responde RST esta cerrado y si no responde es inalcanzable. En caso de no tener privilegios automáticamente se usa una conexión total. Si no se dan puertos, lo lanza al 80.

-PA<puertos> ACK: Como la anterior pero con ACK, combinando ambas se obtienen mejores resultados.

-PU<puertos> UDP: El objetivo es el contrario, se envían a puertos que se espera que estén cerrados. Algunos firewall solo revisan conexiones TCP. Si está cerrado se responde con port unreachable, si se responde con otro icmp o no se responde se deja como destino inalcanzable.

-PE, -PP, -PM PINGS ICMP:echo replay, timestamp y addresmask. Se lanzan para descubrir si el objetivo esta activo

-PY<puertos> SCTP: Envía sondas SCTP INIT al 80 por defecto, se puede responder INIT-ACK(abierto) o ABORT(cerrado) o nada o ICMP inalcanzable(inactivo)

-PO<protocolos>: Se indica un protocolo en las cabeceras, por defecto 1(ICMP), 2(IGMP) y 4(Encap IP). Para los protocolos ICMP, IGMP, TCP (6) Y UDP (17) se envían las cabeceras del protocolo, para el resto solo se envía la cabecera IP. EL objetivo de esto es que por la malformación de las cabeceras, se responda Protocolo inalcanzable o respuestas del mismo protocolo para saber si está levantado.

-n No DNS
-R DNS siempre

## Técnicas de escaneo de puertos:

-sS --> No completa la conexión por lo que no deja rastro, muy buena si se puede usar.
-sT --> Completa la conexión, por lo que sí que deja rastro, pero seguro que se puede usar.
-sU --> Más lenta, para UDP. 

-sY --> Protocolo SCTP no llega a establecer la conexión, por lo que no hay registros, funciona como -PY
-sN,-sX,-sF --> Null, Fin, Xmas, sirven pueden penetrar algunos firewall y sacar información. 

-sO --> Protocol Ip scan: Envía cabeceras mal y vacías en las que a veces no se distingue ni el protocolo. Si llega ICMP unreachable protocol esta cerrado, si llega unreachable port esta abierto.
    
## Centrar análisis:
    
-p: Sirve para dar los puertos a escanear. Para seleccionar los 65335: -p- o -p all. 

-sV Escaneado de versión, se puede regular la intensidad de 0 a 9, por defecto 7.

-O Deteccion de os

## Para definir lo agresivo que queremos que sea nmap: -T paranoid|sneaky|polite|normal|aggressive|insane
    
-T (0-1)
-T0 --> Solo se escanea 1 puerto a la vez y se espera 5min hasta el siguiente
-T1 y T2 --> Muy parecidos pero solo esperan 15 y 0,4seg respectivamente enttre cada prueba
-T3 --> Funcionamiento por defecto, incluye en paralelo
-T4 --> --max-rtt-timeout 1250ms --min-rtt-timeout 100ms --initial-rtt-timeout 500ms --max-retries 6 --max-scan-delay 10ms
-T5 --> --max-rtt-timeout 300ms --min-rtt-timeout 50ms --initial-rtt-timeout 250ms --max-retries 2 --host-timeout 15m --max-scan-delay 5ms
